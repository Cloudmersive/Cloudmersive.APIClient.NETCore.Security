/* 
 * securityapi
 *
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.Security.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.Security.Model
{
    /// <summary>
    /// Result of checking a URL for SSRF threats
    /// </summary>
    [DataContract]
    public partial class UrlSsrfThreatDetectionResponseFull :  IEquatable<UrlSsrfThreatDetectionResponseFull>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlSsrfThreatDetectionResponseFull" /> class.
        /// </summary>
        /// <param name="cleanURL">True if the URL is clean, false if it is at risk of containing an SSRF threat or attack.</param>
        /// <param name="threatLevel">Threat level of the URL; possible values are High, Medium, Low and None.</param>
        public UrlSsrfThreatDetectionResponseFull(bool? cleanURL = default(bool?), string threatLevel = default(string))
        {
            this.CleanURL = cleanURL;
            this.ThreatLevel = threatLevel;
        }
        
        /// <summary>
        /// True if the URL is clean, false if it is at risk of containing an SSRF threat or attack
        /// </summary>
        /// <value>True if the URL is clean, false if it is at risk of containing an SSRF threat or attack</value>
        [DataMember(Name="CleanURL", EmitDefaultValue=false)]
        public bool? CleanURL { get; set; }

        /// <summary>
        /// Threat level of the URL; possible values are High, Medium, Low and None
        /// </summary>
        /// <value>Threat level of the URL; possible values are High, Medium, Low and None</value>
        [DataMember(Name="ThreatLevel", EmitDefaultValue=false)]
        public string ThreatLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UrlSsrfThreatDetectionResponseFull {\n");
            sb.Append("  CleanURL: ").Append(CleanURL).Append("\n");
            sb.Append("  ThreatLevel: ").Append(ThreatLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UrlSsrfThreatDetectionResponseFull);
        }

        /// <summary>
        /// Returns true if UrlSsrfThreatDetectionResponseFull instances are equal
        /// </summary>
        /// <param name="input">Instance of UrlSsrfThreatDetectionResponseFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UrlSsrfThreatDetectionResponseFull input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CleanURL == input.CleanURL ||
                    (this.CleanURL != null &&
                    this.CleanURL.Equals(input.CleanURL))
                ) && 
                (
                    this.ThreatLevel == input.ThreatLevel ||
                    (this.ThreatLevel != null &&
                    this.ThreatLevel.Equals(input.ThreatLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CleanURL != null)
                    hashCode = hashCode * 59 + this.CleanURL.GetHashCode();
                if (this.ThreatLevel != null)
                    hashCode = hashCode * 59 + this.ThreatLevel.GetHashCode();
                return hashCode;
            }
        }
    }

}
