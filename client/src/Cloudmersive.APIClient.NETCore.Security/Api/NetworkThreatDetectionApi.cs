/* 
 * securityapi
 *
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cloudmersive.APIClient.NETCore.Security.Client;
using Cloudmersive.APIClient.NETCore.Security.Model;

namespace Cloudmersive.APIClient.NETCore.Security.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkThreatDetectionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>UrlSsrfThreatDetectionResponseFull</returns>
        UrlSsrfThreatDetectionResponseFull NetworkThreatDetectionDetectSsrfUrl (UrlSsrfThreatDetectionRequestFull request);

        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of UrlSsrfThreatDetectionResponseFull</returns>
        ApiResponse<UrlSsrfThreatDetectionResponseFull> NetworkThreatDetectionDetectSsrfUrlWithHttpInfo (UrlSsrfThreatDetectionRequestFull request);
        /// <summary>
        /// Check if IP address is a Bot client threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ThreatDetectionBotCheckResponse</returns>
        ThreatDetectionBotCheckResponse NetworkThreatDetectionIsBot (string value);

        /// <summary>
        /// Check if IP address is a Bot client threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of ThreatDetectionBotCheckResponse</returns>
        ApiResponse<ThreatDetectionBotCheckResponse> NetworkThreatDetectionIsBotWithHttpInfo (string value);
        /// <summary>
        /// Check if IP address is a known threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>IPThreatDetectionResponse</returns>
        IPThreatDetectionResponse NetworkThreatDetectionIsThreat (string value);

        /// <summary>
        /// Check if IP address is a known threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of IPThreatDetectionResponse</returns>
        ApiResponse<IPThreatDetectionResponse> NetworkThreatDetectionIsThreatWithHttpInfo (string value);
        /// <summary>
        /// Check if IP address is a Tor node server
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ThreatDetectionTorNodeResponse</returns>
        ThreatDetectionTorNodeResponse NetworkThreatDetectionIsTorNode (string value);

        /// <summary>
        /// Check if IP address is a Tor node server
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of ThreatDetectionTorNodeResponse</returns>
        ApiResponse<ThreatDetectionTorNodeResponse> NetworkThreatDetectionIsTorNodeWithHttpInfo (string value);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of UrlSsrfThreatDetectionResponseFull</returns>
        System.Threading.Tasks.Task<UrlSsrfThreatDetectionResponseFull> NetworkThreatDetectionDetectSsrfUrlAsync (UrlSsrfThreatDetectionRequestFull request);

        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats
        /// </summary>
        /// <remarks>
        /// Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (UrlSsrfThreatDetectionResponseFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlSsrfThreatDetectionResponseFull>> NetworkThreatDetectionDetectSsrfUrlAsyncWithHttpInfo (UrlSsrfThreatDetectionRequestFull request);
        /// <summary>
        /// Check if IP address is a Bot client threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ThreatDetectionBotCheckResponse</returns>
        System.Threading.Tasks.Task<ThreatDetectionBotCheckResponse> NetworkThreatDetectionIsBotAsync (string value);

        /// <summary>
        /// Check if IP address is a Bot client threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (ThreatDetectionBotCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreatDetectionBotCheckResponse>> NetworkThreatDetectionIsBotAsyncWithHttpInfo (string value);
        /// <summary>
        /// Check if IP address is a known threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of IPThreatDetectionResponse</returns>
        System.Threading.Tasks.Task<IPThreatDetectionResponse> NetworkThreatDetectionIsThreatAsync (string value);

        /// <summary>
        /// Check if IP address is a known threat
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (IPThreatDetectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IPThreatDetectionResponse>> NetworkThreatDetectionIsThreatAsyncWithHttpInfo (string value);
        /// <summary>
        /// Check if IP address is a Tor node server
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ThreatDetectionTorNodeResponse</returns>
        System.Threading.Tasks.Task<ThreatDetectionTorNodeResponse> NetworkThreatDetectionIsTorNodeAsync (string value);

        /// <summary>
        /// Check if IP address is a Tor node server
        /// </summary>
        /// <remarks>
        /// Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (ThreatDetectionTorNodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreatDetectionTorNodeResponse>> NetworkThreatDetectionIsTorNodeAsyncWithHttpInfo (string value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NetworkThreatDetectionApi : INetworkThreatDetectionApi
    {
        private Cloudmersive.APIClient.NETCore.Security.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkThreatDetectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkThreatDetectionApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NETCore.Security.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.Security.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkThreatDetectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NetworkThreatDetectionApi(Cloudmersive.APIClient.NETCore.Security.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NETCore.Security.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.Security.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NETCore.Security.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.Security.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>UrlSsrfThreatDetectionResponseFull</returns>
        public UrlSsrfThreatDetectionResponseFull NetworkThreatDetectionDetectSsrfUrl (UrlSsrfThreatDetectionRequestFull request)
        {
             ApiResponse<UrlSsrfThreatDetectionResponseFull> localVarResponse = NetworkThreatDetectionDetectSsrfUrlWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>ApiResponse of UrlSsrfThreatDetectionResponseFull</returns>
        public ApiResponse< UrlSsrfThreatDetectionResponseFull > NetworkThreatDetectionDetectSsrfUrlWithHttpInfo (UrlSsrfThreatDetectionRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling NetworkThreatDetectionApi->NetworkThreatDetectionDetectSsrfUrl");

            var localVarPath = "./security/threat-detection/network/url/ssrf/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionDetectSsrfUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSsrfThreatDetectionResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UrlSsrfThreatDetectionResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSsrfThreatDetectionResponseFull)));
        }

        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of UrlSsrfThreatDetectionResponseFull</returns>
        public async System.Threading.Tasks.Task<UrlSsrfThreatDetectionResponseFull> NetworkThreatDetectionDetectSsrfUrlAsync (UrlSsrfThreatDetectionRequestFull request)
        {
             ApiResponse<UrlSsrfThreatDetectionResponseFull> localVarResponse = await NetworkThreatDetectionDetectSsrfUrlAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check a URL for Server-side Request Forgery (SSRF) threats Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Input URL request</param>
        /// <returns>Task of ApiResponse (UrlSsrfThreatDetectionResponseFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UrlSsrfThreatDetectionResponseFull>> NetworkThreatDetectionDetectSsrfUrlAsyncWithHttpInfo (UrlSsrfThreatDetectionRequestFull request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling NetworkThreatDetectionApi->NetworkThreatDetectionDetectSsrfUrl");

            var localVarPath = "./security/threat-detection/network/url/ssrf/detect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionDetectSsrfUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlSsrfThreatDetectionResponseFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UrlSsrfThreatDetectionResponseFull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlSsrfThreatDetectionResponseFull)));
        }

        /// <summary>
        /// Check if IP address is a Bot client threat Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ThreatDetectionBotCheckResponse</returns>
        public ThreatDetectionBotCheckResponse NetworkThreatDetectionIsBot (string value)
        {
             ApiResponse<ThreatDetectionBotCheckResponse> localVarResponse = NetworkThreatDetectionIsBotWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if IP address is a Bot client threat Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of ThreatDetectionBotCheckResponse</returns>
        public ApiResponse< ThreatDetectionBotCheckResponse > NetworkThreatDetectionIsBotWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling NetworkThreatDetectionApi->NetworkThreatDetectionIsBot");

            var localVarPath = "./security/threat-detection/network/ip/is-bot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionIsBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreatDetectionBotCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ThreatDetectionBotCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreatDetectionBotCheckResponse)));
        }

        /// <summary>
        /// Check if IP address is a Bot client threat Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ThreatDetectionBotCheckResponse</returns>
        public async System.Threading.Tasks.Task<ThreatDetectionBotCheckResponse> NetworkThreatDetectionIsBotAsync (string value)
        {
             ApiResponse<ThreatDetectionBotCheckResponse> localVarResponse = await NetworkThreatDetectionIsBotAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if IP address is a Bot client threat Check if the input IP address is a Bot, robot, or otherwise a non-user entity.  Leverages real-time signals to check against known high-probability bots..
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (ThreatDetectionBotCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThreatDetectionBotCheckResponse>> NetworkThreatDetectionIsBotAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling NetworkThreatDetectionApi->NetworkThreatDetectionIsBot");

            var localVarPath = "./security/threat-detection/network/ip/is-bot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionIsBot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreatDetectionBotCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ThreatDetectionBotCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreatDetectionBotCheckResponse)));
        }

        /// <summary>
        /// Check if IP address is a known threat Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>IPThreatDetectionResponse</returns>
        public IPThreatDetectionResponse NetworkThreatDetectionIsThreat (string value)
        {
             ApiResponse<IPThreatDetectionResponse> localVarResponse = NetworkThreatDetectionIsThreatWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if IP address is a known threat Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of IPThreatDetectionResponse</returns>
        public ApiResponse< IPThreatDetectionResponse > NetworkThreatDetectionIsThreatWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling NetworkThreatDetectionApi->NetworkThreatDetectionIsThreat");

            var localVarPath = "./security/threat-detection/network/ip/is-threat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionIsThreat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPThreatDetectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IPThreatDetectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPThreatDetectionResponse)));
        }

        /// <summary>
        /// Check if IP address is a known threat Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of IPThreatDetectionResponse</returns>
        public async System.Threading.Tasks.Task<IPThreatDetectionResponse> NetworkThreatDetectionIsThreatAsync (string value)
        {
             ApiResponse<IPThreatDetectionResponse> localVarResponse = await NetworkThreatDetectionIsThreatAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if IP address is a known threat Check if the input IP address is a known threat IP address.  Checks against known bad IPs, botnets, compromised servers, and other lists of threats.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (IPThreatDetectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IPThreatDetectionResponse>> NetworkThreatDetectionIsThreatAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling NetworkThreatDetectionApi->NetworkThreatDetectionIsThreat");

            var localVarPath = "./security/threat-detection/network/ip/is-threat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionIsThreat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IPThreatDetectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (IPThreatDetectionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IPThreatDetectionResponse)));
        }

        /// <summary>
        /// Check if IP address is a Tor node server Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ThreatDetectionTorNodeResponse</returns>
        public ThreatDetectionTorNodeResponse NetworkThreatDetectionIsTorNode (string value)
        {
             ApiResponse<ThreatDetectionTorNodeResponse> localVarResponse = NetworkThreatDetectionIsTorNodeWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if IP address is a Tor node server Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>ApiResponse of ThreatDetectionTorNodeResponse</returns>
        public ApiResponse< ThreatDetectionTorNodeResponse > NetworkThreatDetectionIsTorNodeWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling NetworkThreatDetectionApi->NetworkThreatDetectionIsTorNode");

            var localVarPath = "./security/threat-detection/network/ip/is-tor-node";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionIsTorNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreatDetectionTorNodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ThreatDetectionTorNodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreatDetectionTorNodeResponse)));
        }

        /// <summary>
        /// Check if IP address is a Tor node server Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ThreatDetectionTorNodeResponse</returns>
        public async System.Threading.Tasks.Task<ThreatDetectionTorNodeResponse> NetworkThreatDetectionIsTorNodeAsync (string value)
        {
             ApiResponse<ThreatDetectionTorNodeResponse> localVarResponse = await NetworkThreatDetectionIsTorNodeAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if IP address is a Tor node server Check if the input IP address is a Tor exit node server.  Tor servers are a type of privacy-preserving technology that can hide the original IP address who makes a request.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">IP address to check, e.g. \&quot;55.55.55.55\&quot;.  The input is a string so be sure to enclose it in double-quotes.</param>
        /// <returns>Task of ApiResponse (ThreatDetectionTorNodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThreatDetectionTorNodeResponse>> NetworkThreatDetectionIsTorNodeAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling NetworkThreatDetectionApi->NetworkThreatDetectionIsTorNode");

            var localVarPath = "./security/threat-detection/network/ip/is-tor-node";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkThreatDetectionIsTorNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreatDetectionTorNodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ThreatDetectionTorNodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreatDetectionTorNodeResponse)));
        }

    }
}
