/* 
 * securityapi
 *
 * The security APIs help you detect and block security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Cloudmersive.APIClient.NETCore.Security.Client;
using Cloudmersive.APIClient.NETCore.Security.Model;

namespace Cloudmersive.APIClient.NETCore.Security.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentThreatDetectionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Automatically detect threats in an input string
        /// </summary>
        /// <remarks>
        /// Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringAutomaticThreatDetection</returns>
        StringAutomaticThreatDetection ContentThreatDetectionAutomaticThreatDetectionString (string value);

        /// <summary>
        /// Automatically detect threats in an input string
        /// </summary>
        /// <remarks>
        /// Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringAutomaticThreatDetection</returns>
        ApiResponse<StringAutomaticThreatDetection> ContentThreatDetectionAutomaticThreatDetectionStringWithHttpInfo (string value);
        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringSqlInjectionDetectionResult</returns>
        StringSqlInjectionDetectionResult ContentThreatDetectionCheckSqlInjectionString (string value);

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringSqlInjectionDetectionResult</returns>
        ApiResponse<StringSqlInjectionDetectionResult> ContentThreatDetectionCheckSqlInjectionStringWithHttpInfo (string value);
        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from XML text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringXxeDetectionResult</returns>
        StringXxeDetectionResult ContentThreatDetectionCheckXxe (string value);

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from XML text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringXxeDetectionResult</returns>
        ApiResponse<StringXxeDetectionResult> ContentThreatDetectionCheckXxeWithHttpInfo (string value);
        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string
        /// </summary>
        /// <remarks>
        /// Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringInsecureDeserializationJsonDetection</returns>
        StringInsecureDeserializationJsonDetection ContentThreatDetectionDetectInsecureDeserializationJsonString (string value);

        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string
        /// </summary>
        /// <remarks>
        /// Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringInsecureDeserializationJsonDetection</returns>
        ApiResponse<StringInsecureDeserializationJsonDetection> ContentThreatDetectionDetectInsecureDeserializationJsonStringWithHttpInfo (string value);
        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringXssProtectionResult</returns>
        StringXssProtectionResult ContentThreatDetectionProtectXss (string value);

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringXssProtectionResult</returns>
        ApiResponse<StringXssProtectionResult> ContentThreatDetectionProtectXssWithHttpInfo (string value);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Automatically detect threats in an input string
        /// </summary>
        /// <remarks>
        /// Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringAutomaticThreatDetection</returns>
        System.Threading.Tasks.Task<StringAutomaticThreatDetection> ContentThreatDetectionAutomaticThreatDetectionStringAsync (string value);

        /// <summary>
        /// Automatically detect threats in an input string
        /// </summary>
        /// <remarks>
        /// Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringAutomaticThreatDetection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringAutomaticThreatDetection>> ContentThreatDetectionAutomaticThreatDetectionStringAsyncWithHttpInfo (string value);
        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringSqlInjectionDetectionResult</returns>
        System.Threading.Tasks.Task<StringSqlInjectionDetectionResult> ContentThreatDetectionCheckSqlInjectionStringAsync (string value);

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks
        /// </summary>
        /// <remarks>
        /// Detects SQL Injection (SQLI) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringSqlInjectionDetectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringSqlInjectionDetectionResult>> ContentThreatDetectionCheckSqlInjectionStringAsyncWithHttpInfo (string value);
        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from XML text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringXxeDetectionResult</returns>
        System.Threading.Tasks.Task<StringXxeDetectionResult> ContentThreatDetectionCheckXxeAsync (string value);

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks
        /// </summary>
        /// <remarks>
        /// Detects XXE (XML External Entity) attacks from XML text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringXxeDetectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringXxeDetectionResult>> ContentThreatDetectionCheckXxeAsyncWithHttpInfo (string value);
        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string
        /// </summary>
        /// <remarks>
        /// Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringInsecureDeserializationJsonDetection</returns>
        System.Threading.Tasks.Task<StringInsecureDeserializationJsonDetection> ContentThreatDetectionDetectInsecureDeserializationJsonStringAsync (string value);

        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string
        /// </summary>
        /// <remarks>
        /// Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringInsecureDeserializationJsonDetection)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringInsecureDeserializationJsonDetection>> ContentThreatDetectionDetectInsecureDeserializationJsonStringAsyncWithHttpInfo (string value);
        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringXssProtectionResult</returns>
        System.Threading.Tasks.Task<StringXssProtectionResult> ContentThreatDetectionProtectXssAsync (string value);

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization
        /// </summary>
        /// <remarks>
        /// Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringXssProtectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringXssProtectionResult>> ContentThreatDetectionProtectXssAsyncWithHttpInfo (string value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentThreatDetectionApi : IContentThreatDetectionApi
    {
        private Cloudmersive.APIClient.NETCore.Security.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentThreatDetectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentThreatDetectionApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NETCore.Security.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NETCore.Security.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentThreatDetectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentThreatDetectionApi(Cloudmersive.APIClient.NETCore.Security.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NETCore.Security.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NETCore.Security.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NETCore.Security.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NETCore.Security.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Automatically detect threats in an input string Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringAutomaticThreatDetection</returns>
        public StringAutomaticThreatDetection ContentThreatDetectionAutomaticThreatDetectionString (string value)
        {
             ApiResponse<StringAutomaticThreatDetection> localVarResponse = ContentThreatDetectionAutomaticThreatDetectionStringWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Automatically detect threats in an input string Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringAutomaticThreatDetection</returns>
        public ApiResponse< StringAutomaticThreatDetection > ContentThreatDetectionAutomaticThreatDetectionStringWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionAutomaticThreatDetectionString");

            var localVarPath = "./security/threat-detection/content/automatic/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionAutomaticThreatDetectionString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringAutomaticThreatDetection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringAutomaticThreatDetection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringAutomaticThreatDetection)));
        }

        /// <summary>
        /// Automatically detect threats in an input string Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringAutomaticThreatDetection</returns>
        public async System.Threading.Tasks.Task<StringAutomaticThreatDetection> ContentThreatDetectionAutomaticThreatDetectionStringAsync (string value)
        {
             ApiResponse<StringAutomaticThreatDetection> localVarResponse = await ContentThreatDetectionAutomaticThreatDetectionStringAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Automatically detect threats in an input string Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringAutomaticThreatDetection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringAutomaticThreatDetection>> ContentThreatDetectionAutomaticThreatDetectionStringAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionAutomaticThreatDetectionString");

            var localVarPath = "./security/threat-detection/content/automatic/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionAutomaticThreatDetectionString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringAutomaticThreatDetection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringAutomaticThreatDetection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringAutomaticThreatDetection)));
        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringSqlInjectionDetectionResult</returns>
        public StringSqlInjectionDetectionResult ContentThreatDetectionCheckSqlInjectionString (string value)
        {
             ApiResponse<StringSqlInjectionDetectionResult> localVarResponse = ContentThreatDetectionCheckSqlInjectionStringWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringSqlInjectionDetectionResult</returns>
        public ApiResponse< StringSqlInjectionDetectionResult > ContentThreatDetectionCheckSqlInjectionStringWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionCheckSqlInjectionString");

            var localVarPath = "./security/threat-detection/content/sql-injection/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionCheckSqlInjectionString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringSqlInjectionDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringSqlInjectionDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringSqlInjectionDetectionResult)));
        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringSqlInjectionDetectionResult</returns>
        public async System.Threading.Tasks.Task<StringSqlInjectionDetectionResult> ContentThreatDetectionCheckSqlInjectionStringAsync (string value)
        {
             ApiResponse<StringSqlInjectionDetectionResult> localVarResponse = await ContentThreatDetectionCheckSqlInjectionStringAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check text input for SQL Injection (SQLI) attacks Detects SQL Injection (SQLI) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringSqlInjectionDetectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringSqlInjectionDetectionResult>> ContentThreatDetectionCheckSqlInjectionStringAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionCheckSqlInjectionString");

            var localVarPath = "./security/threat-detection/content/sql-injection/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionCheckSqlInjectionString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringSqlInjectionDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringSqlInjectionDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringSqlInjectionDetectionResult)));
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from XML text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringXxeDetectionResult</returns>
        public StringXxeDetectionResult ContentThreatDetectionCheckXxe (string value)
        {
             ApiResponse<StringXxeDetectionResult> localVarResponse = ContentThreatDetectionCheckXxeWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from XML text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringXxeDetectionResult</returns>
        public ApiResponse< StringXxeDetectionResult > ContentThreatDetectionCheckXxeWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionCheckXxe");

            var localVarPath = "./security/threat-detection/content/xxe/detect/xml/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionCheckXxe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringXxeDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringXxeDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringXxeDetectionResult)));
        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from XML text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringXxeDetectionResult</returns>
        public async System.Threading.Tasks.Task<StringXxeDetectionResult> ContentThreatDetectionCheckXxeAsync (string value)
        {
             ApiResponse<StringXxeDetectionResult> localVarResponse = await ContentThreatDetectionCheckXxeAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect text input from XML External Entity (XXE) attacks Detects XXE (XML External Entity) attacks from XML text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringXxeDetectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringXxeDetectionResult>> ContentThreatDetectionCheckXxeAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionCheckXxe");

            var localVarPath = "./security/threat-detection/content/xxe/detect/xml/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionCheckXxe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringXxeDetectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringXxeDetectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringXxeDetectionResult)));
        }

        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringInsecureDeserializationJsonDetection</returns>
        public StringInsecureDeserializationJsonDetection ContentThreatDetectionDetectInsecureDeserializationJsonString (string value)
        {
             ApiResponse<StringInsecureDeserializationJsonDetection> localVarResponse = ContentThreatDetectionDetectInsecureDeserializationJsonStringWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringInsecureDeserializationJsonDetection</returns>
        public ApiResponse< StringInsecureDeserializationJsonDetection > ContentThreatDetectionDetectInsecureDeserializationJsonStringWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionDetectInsecureDeserializationJsonString");

            var localVarPath = "./security/threat-detection/content/insecure-deserialization/json/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionDetectInsecureDeserializationJsonString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringInsecureDeserializationJsonDetection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringInsecureDeserializationJsonDetection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringInsecureDeserializationJsonDetection)));
        }

        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringInsecureDeserializationJsonDetection</returns>
        public async System.Threading.Tasks.Task<StringInsecureDeserializationJsonDetection> ContentThreatDetectionDetectInsecureDeserializationJsonStringAsync (string value)
        {
             ApiResponse<StringInsecureDeserializationJsonDetection> localVarResponse = await ContentThreatDetectionDetectInsecureDeserializationJsonStringAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect Insecure Deserialization JSON (JID) attacks in a string Detects Insecure Deserialization JSON (JID) attacks from text input.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringInsecureDeserializationJsonDetection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringInsecureDeserializationJsonDetection>> ContentThreatDetectionDetectInsecureDeserializationJsonStringAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionDetectInsecureDeserializationJsonString");

            var localVarPath = "./security/threat-detection/content/insecure-deserialization/json/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionDetectInsecureDeserializationJsonString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringInsecureDeserializationJsonDetection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringInsecureDeserializationJsonDetection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringInsecureDeserializationJsonDetection)));
        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>StringXssProtectionResult</returns>
        public StringXssProtectionResult ContentThreatDetectionProtectXss (string value)
        {
             ApiResponse<StringXssProtectionResult> localVarResponse = ContentThreatDetectionProtectXssWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>ApiResponse of StringXssProtectionResult</returns>
        public ApiResponse< StringXssProtectionResult > ContentThreatDetectionProtectXssWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionProtectXss");

            var localVarPath = "./security/threat-detection/content/xss/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionProtectXss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringXssProtectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringXssProtectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringXssProtectionResult)));
        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of StringXssProtectionResult</returns>
        public async System.Threading.Tasks.Task<StringXssProtectionResult> ContentThreatDetectionProtectXssAsync (string value)
        {
             ApiResponse<StringXssProtectionResult> localVarResponse = await ContentThreatDetectionProtectXssAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect text input from Cross-Site-Scripting (XSS) attacks through normalization Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NETCore.Security.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">User-facing text input.</param>
        /// <returns>Task of ApiResponse (StringXssProtectionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringXssProtectionResult>> ContentThreatDetectionProtectXssAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling ContentThreatDetectionApi->ContentThreatDetectionProtectXss");

            var localVarPath = "./security/threat-detection/content/xss/detect/string";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContentThreatDetectionProtectXss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringXssProtectionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StringXssProtectionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringXssProtectionResult)));
        }

    }
}
